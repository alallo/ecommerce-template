trigger:
- master

variables:
 - group: "dev-ecommerce-outputs"
 - group: "dev-ecommerce-ui"
 - group: "dev-ecommerce-shared"
 - name: vmImageName
   value: 'ubuntu-latest'
 - name: vmImageNameWin
   value: 'vs2017-win2016'
 - name: workingDirectory
   value: '$(System.DefaultWorkingDirectory)/ecommerce-template'
 - name : buildConfiguration
   value: 'Release'

stages:
- stage: build
  jobs:
  - job: build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'

    - task: Npm@1
      displayName: 'npm install'
      inputs:
        workingDir: $(workingDirectory)
        command: install

    - task: Npm@1
      displayName: 'npm build'
      inputs:
        workingDir: $(workingDirectory)
        command: custom
        customCommand: run-script build
      env:
        REACT_APP_SERVER_URL_PROD: $(function_hostname)
        REACT_APP_SERVER_API_KEY: $(function_master_key)
    
    - task: CopyFiles@2
      displayName: 'Copy Files'
      inputs:
        SourceFolder: '$(workingDirectory)/build'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: BuildOutputs

- stage: Dev
  displayName: Deploy stage
  dependsOn: Build
  jobs:
    - template: Deploy/terraform-pipelines.yml
      parameters:
          environment: $(environment)
          location_short: $(location_short)
          vmImageName: $(vmImageNameWin)
          resourceGroupName: '$(resourceGroupName)'
          storageAccountName: '$(storageAccountName)'
          containerName: '$(containerName)'
          workingDir: 'Deploy/terraform'
          tfstateKey: '$(tfstateKey)'
          artifactName: BuildOutputs